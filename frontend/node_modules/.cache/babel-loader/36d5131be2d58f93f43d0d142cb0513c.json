{"ast":null,"code":"import { ACTION_TYPES } from \"../pages/Posts/actions/postMessage\";\n\nconst {\n  creatSlice\n} = require(\"@reduxjs/toolkit\"); // const initialState = {\n//   list: [],\n// };\n//postMessage.list\n\n\nconst postSlice = creatSlice({\n  name: \"post\",\n  list: [],\n  reducers: {\n    fetch_all(state, action) {\n      state.push(action.payload);\n    },\n\n    create(state, action) {\n      state.push(list);\n      state.push(action.payload);\n    },\n\n    update(state, action) {\n      list = state.list.map(x => x._id == action.payload._id ? action.payload : x);\n    }\n\n  }\n});\nexport const postMessage = (state = initialState, action) => {\n  switch (action.type) {\n    // case ACTION_TYPES.FETCH_ALL:\n    //   return {\n    //     ...state,\n    //     list: [...action.payload],\n    //   };\n    // case ACTION_TYPES.CREATE:\n    //   return {\n    //     ...state,\n    //     list: [...state.list, action.payload],\n    //   };\n    // case ACTION_TYPES.UPDATE:\n    //   return {\n    //     ...state,\n    //     list: state.list.map((x) =>\n    //       x._id == action.payload._id ? action.payload : x\n    //     ),\n    //   };\n    case ACTION_TYPES.DELETE:\n      return { ...state,\n        list: state.list.filter(x => x._id != action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/reducers/postMessage.js"],"names":["ACTION_TYPES","creatSlice","require","postSlice","name","list","reducers","fetch_all","state","action","push","payload","create","update","map","x","_id","postMessage","initialState","type","DELETE","filter"],"mappings":"AAAA,SAASA,YAAT,QAA6B,oCAA7B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAiBC,OAAO,CAAC,kBAAD,CAA9B,C,CACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAGF,UAAU,CAAC;AAC3BG,EAAAA,IAAI,EAAE,MADqB;AAE3BC,EAAAA,IAAI,EAAE,EAFqB;AAG3BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;;AAIRC,IAAAA,MAAM,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACE,IAAN,CAAWL,IAAX;AACAG,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAPO;;AAQRE,IAAAA,MAAM,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACpBJ,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAN,CAAWS,GAAX,CAAgBC,CAAD,IACpBA,CAAC,CAACC,GAAF,IAASP,MAAM,CAACE,OAAP,CAAeK,GAAxB,GAA8BP,MAAM,CAACE,OAArC,GAA+CI,CAD1C,CAAP;AAGD;;AAZO;AAHiB,CAAD,CAA5B;AAmBA,OAAO,MAAME,WAAW,GAAG,CAACT,KAAK,GAAGU,YAAT,EAAuBT,MAAvB,KAAkC;AAC3D,UAAQA,MAAM,CAACU,IAAf;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAKnB,YAAY,CAACoB,MAAlB;AACE,aAAO,EACL,GAAGZ,KADE;AAELH,QAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWgB,MAAX,CAAmBN,CAAD,IAAOA,CAAC,CAACC,GAAF,IAASP,MAAM,CAACE,OAAzC;AAFD,OAAP;;AAKF;AACE,aAAOH,KAAP;AA1BJ;AA4BD,CA7BM","sourcesContent":["import { ACTION_TYPES } from \"../pages/Posts/actions/postMessage\";\r\n\r\nconst { creatSlice } = require(\"@reduxjs/toolkit\");\r\n// const initialState = {\r\n//   list: [],\r\n// };\r\n//postMessage.list\r\nconst postSlice = creatSlice({\r\n  name: \"post\",\r\n  list: [],\r\n  reducers: {\r\n    fetch_all(state, action) {\r\n      state.push(action.payload);\r\n    },\r\n    create(state, action) {\r\n      state.push(list);\r\n      state.push(action.payload);\r\n    },\r\n    update(state, action) {\r\n      list = state.list.map((x) =>\r\n        x._id == action.payload._id ? action.payload : x\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nexport const postMessage = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // case ACTION_TYPES.FETCH_ALL:\r\n    //   return {\r\n    //     ...state,\r\n    //     list: [...action.payload],\r\n    //   };\r\n    // case ACTION_TYPES.CREATE:\r\n    //   return {\r\n    //     ...state,\r\n    //     list: [...state.list, action.payload],\r\n    //   };\r\n    // case ACTION_TYPES.UPDATE:\r\n    //   return {\r\n    //     ...state,\r\n    //     list: state.list.map((x) =>\r\n    //       x._id == action.payload._id ? action.payload : x\r\n    //     ),\r\n    //   };\r\n\r\n    case ACTION_TYPES.DELETE:\r\n      return {\r\n        ...state,\r\n        list: state.list.filter((x) => x._id != action.payload),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}