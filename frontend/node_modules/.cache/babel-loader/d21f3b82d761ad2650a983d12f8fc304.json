{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\himan\\\\Downloads\\\\Compressed\\\\Glains-Coders-House-master\\\\GlainsCodersHouse\\\\backend\\\\frontend\\\\src\\\\pages\\\\Posts\\\\PostMessageForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFieldValues = {\n  title: \"\",\n  message: \"\"\n};\n\nconst styles = theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1)\n    }\n  },\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n  },\n  postBtn: {\n    width: \"50%\"\n  }\n});\n\nconst PostMessageForm = ({\n  classes,\n  ...props\n}) => {\n  _s();\n\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.postMessageList.find(x => x._id == props.currentId)\n      });\n      setErrors({});\n    }\n  }, [props.currentId]);\n\n  const validate = () => {\n    let temp = { ...errors\n    };\n    temp.title = values.title ? \"\" : \"This field is required.\";\n    temp.message = values.message ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n    return Object.values(temp).every(x => x == \"\");\n  };\n\n  var {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, props.setCurrentId);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const onSuccess = () => {\n      ButterToast.raise({\n        content: /*#__PURE__*/_jsxDEV(Cinnamon.Crisp, {\n          title: \"Post Box\",\n          content: \"Submitted successfully\",\n          scheme: Cinnamon.Crisp.SCHEME_PURPLE,\n          icon: /*#__PURE__*/_jsxDEV(AssignmentTurnedIn, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      });\n      resetForm();\n    };\n\n    if (validate()) {\n      if (props.currentId == 0) props.createPostMessage(values, onSuccess);else props.updatePostMessage(props.currentId, values, onSuccess);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      name: \"title\",\n      variant: \"outlined\",\n      label: \"Title\",\n      fullWidth: true,\n      value: values.title,\n      onChange: handleInputChange,\n      ...(errors.title && {\n        error: true,\n        helperText: errors.title\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      name: \"message\",\n      variant: \"outlined\",\n      label: \"Message\",\n      fullWidth: true,\n      multiline: true,\n      rows: 4,\n      value: values.message,\n      onChange: handleInputChange,\n      ...(errors.message && {\n        error: true,\n        helperText: errors.message\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      type: \"submit\",\n      className: classes.postBtn,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostMessageForm, \"u4XZEtN9kxppLEsn4E+2q6oBlpk=\", false, function () {\n  return [useForm];\n});\n\n_c = PostMessageForm;\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));\n\nvar _c;\n\n$RefreshReg$(_c, \"PostMessageForm\");","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/pages/Posts/PostMessageForm.js"],"names":["React","useEffect","useState","TextField","withStyles","Button","useForm","connect","actions","ButterToast","Cinnamon","AssignmentTurnedIn","initialFieldValues","title","message","styles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","PostMessageForm","classes","props","currentId","setValues","postMessageList","find","x","_id","setErrors","validate","temp","errors","values","Object","every","handleInputChange","resetForm","setCurrentId","handleSubmit","e","preventDefault","onSuccess","raise","content","Crisp","SCHEME_PURPLE","createPostMessage","updatePostMessage","error","helperText","mapStateToProps","state","postMessage","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\r\n\r\nconst initialFieldValues = {\r\n  title: \"\",\r\n  message: \"\",\r\n};\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n  postBtn: {\r\n    width: \"50%\",\r\n  },\r\n});\r\n\r\nconst PostMessageForm = ({ classes, ...props }) => {\r\n  useEffect(() => {\r\n    if (props.currentId != 0) {\r\n      setValues({\r\n        ...props.postMessageList.find((x) => x._id == props.currentId),\r\n      });\r\n      setErrors({});\r\n    }\r\n  }, [props.currentId]);\r\n\r\n  const validate = () => {\r\n    let temp = { ...errors };\r\n    temp.title = values.title ? \"\" : \"This field is required.\";\r\n    temp.message = values.message ? \"\" : \"This field is required.\";\r\n    setErrors({\r\n      ...temp,\r\n    });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  var { values, setValues, errors, setErrors, handleInputChange, resetForm } =\r\n    useForm(initialFieldValues, props.setCurrentId);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const onSuccess = () => {\r\n      ButterToast.raise({\r\n        content: (\r\n          <Cinnamon.Crisp\r\n            title=\"Post Box\"\r\n            content=\"Submitted successfully\"\r\n            scheme={Cinnamon.Crisp.SCHEME_PURPLE}\r\n            icon={<AssignmentTurnedIn />}\r\n          />\r\n        ),\r\n      });\r\n      resetForm();\r\n    };\r\n    if (validate()) {\r\n      if (props.currentId == 0) props.createPostMessage(values, onSuccess);\r\n      else props.updatePostMessage(props.currentId, values, onSuccess);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      autoComplete=\"off\"\r\n      noValidate\r\n      className={`${classes.root} ${classes.form}`}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <TextField\r\n        name=\"title\"\r\n        variant=\"outlined\"\r\n        label=\"Title\"\r\n        fullWidth\r\n        value={values.title}\r\n        onChange={handleInputChange}\r\n        {...(errors.title && { error: true, helperText: errors.title })}\r\n      />\r\n      <TextField\r\n        name=\"message\"\r\n        variant=\"outlined\"\r\n        label=\"Message\"\r\n        fullWidth\r\n        multiline\r\n        rows={4}\r\n        value={values.message}\r\n        onChange={handleInputChange}\r\n        {...(errors.message && { error: true, helperText: errors.message })}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        className={classes.postBtn}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  postMessageList: state.postMessage.list,\r\n});\r\n\r\nconst mapActionToProps = {\r\n  createPostMessage: actions.create,\r\n  updatePostMessage: actions.update,\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapActionToProps\r\n)(withStyles(styles)(PostMessageForm));\r\n"]},"metadata":{},"sourceType":"module"}