{"ast":null,"code":"import _slicedToArray from\"C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useRef,useEffect,useCallback}from'react';export var useStateWithCallback=function useStateWithCallback(intialState){var _useState=useState(intialState),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var cbRef=useRef(null);var updateState=useCallback(function(newState,cb){cbRef.current=cb;setState(function(prev){return typeof newState==='function'?newState(prev):newState;});},[]);useEffect(function(){if(cbRef.current){cbRef.current(state);cbRef.current=null;}},[state]);return[state,updateState];};","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/hooks/useStateWithCallback.js"],"names":["useState","useRef","useEffect","useCallback","useStateWithCallback","intialState","state","setState","cbRef","updateState","newState","cb","current","prev"],"mappings":"wNAAA,OAASA,QAAT,CAAmBC,MAAnB,CAA2BC,SAA3B,CAAsCC,WAAtC,KAAyD,OAAzD,CACA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,WAAD,CAAiB,CACjD,cAA0BL,QAAQ,CAACK,WAAD,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,KAAK,CAAGP,MAAM,CAAC,IAAD,CAApB,CAEA,GAAMQ,CAAAA,WAAW,CAAGN,WAAW,CAAC,SAACO,QAAD,CAAWC,EAAX,CAAkB,CAC9CH,KAAK,CAACI,OAAN,CAAgBD,EAAhB,CAEAJ,QAAQ,CAAC,SAACM,IAAD,QACL,OAAOH,CAAAA,QAAP,GAAoB,UAApB,CAAiCA,QAAQ,CAACG,IAAD,CAAzC,CAAkDH,QAD7C,EAAD,CAAR,CAGH,CAN8B,CAM5B,EAN4B,CAA/B,CAQAR,SAAS,CAAC,UAAM,CACZ,GAAIM,KAAK,CAACI,OAAV,CAAmB,CACfJ,KAAK,CAACI,OAAN,CAAcN,KAAd,EACAE,KAAK,CAACI,OAAN,CAAgB,IAAhB,CACH,CACJ,CALQ,CAKN,CAACN,KAAD,CALM,CAAT,CAOA,MAAO,CAACA,KAAD,CAAQG,WAAR,CAAP,CACH,CApBM","sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\nexport const useStateWithCallback = (intialState) => {\n    const [state, setState] = useState(intialState);\n    const cbRef = useRef(null);\n\n    const updateState = useCallback((newState, cb) => {\n        cbRef.current = cb;\n\n        setState((prev) =>\n            typeof newState === 'function' ? newState(prev) : newState\n        );\n    }, []);\n\n    useEffect(() => {\n        if (cbRef.current) {\n            cbRef.current(state);\n            cbRef.current = null;\n        }\n    }, [state]);\n\n    return [state, updateState];\n};\n"]},"metadata":{},"sourceType":"module"}