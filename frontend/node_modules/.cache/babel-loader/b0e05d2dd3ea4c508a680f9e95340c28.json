{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\himan\\\\Downloads\\\\Compressed\\\\Glains-Coders-House-master\\\\GlainsCodersHouse\\\\backend\\\\frontend\\\\src\\\\pages\\\\Posts\\\\PostMessageForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./actions/postMessage\"; // import ButterToast, { Cinnamon } from \"butter-toast\";\n\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\nimport { create } from \"../../store/postMessageSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialFieldValues = {\n  title: \"\",\n  message: \"\"\n};\n\nconst styles = theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1)\n    }\n  },\n  form: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n  },\n  postBtn: {\n    width: \"50%\"\n  }\n});\n\nconst PostMessageForm = () => {\n  _s();\n\n  const dispatch = useDispatch(); // useEffect(() => {\n  //   if (props.currentId != 0) {\n  //     setValues({\n  //       ...props.postMessageList.find((x) => x._id == props.currentId),\n  //     });\n  //     setErrors({});\n  //   }\n  // }, [props.currentId]);\n  // const validate = () => {\n  //   let temp = { ...errors };\n  //   temp.title = values.title ? \"\" : \"This field is required.\";\n  //   temp.message = values.message ? \"\" : \"This field is required.\";\n  //   setErrors({\n  //     ...temp,\n  //   });\n  //   return Object.values(temp).every((x) => x == \"\");\n  // };\n\n  var {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, setCurrentId);\n\n  const handleAdd = () => {\n    console.log(values);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(e); // const onSuccess = () => {\n    //   console.log(\"Done\");\n  }; //   if (validate()) {\n  //     if (props.currentId == 0) {\n  //       values, onSuccess;\n  //     } else {\n  //       updatePostMessage(props.currentId, values, onSuccess);\n  //     }\n  //   }\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      name: \"title\",\n      variant: \"outlined\",\n      label: \"Title\",\n      fullWidth: true,\n      value: values.title,\n      onChange: handleInputChange,\n      ...(errors.title && {\n        error: true,\n        helperText: errors.title\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      name: \"message\",\n      variant: \"outlined\",\n      label: \"Message\",\n      fullWidth: true,\n      multiline: true,\n      rows: 4,\n      value: values.message,\n      onChange: handleInputChange,\n      ...(errors.message && {\n        error: true,\n        helperText: errors.message\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      type: \"submit\",\n      className: classes.postBtn,\n      onClick: () => handleAdd(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}; // const mapStateToProps = (state) => ({\n//   postMessageList: state.postMessage.list,\n// });\n// const mapActionToProps = {\n//   createPostMessage: actions.create,\n//   updatePostMessage: actions.update,\n// };\n\n\n_s(PostMessageForm, \"8yiBGnsL+XaO0GAzKs26mtyXZao=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = PostMessageForm;\nexport default withStyles(styles)(PostMessageForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostMessageForm\");","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/pages/Posts/PostMessageForm.js"],"names":["React","useEffect","useState","TextField","withStyles","Button","useForm","connect","actions","AssignmentTurnedIn","create","useDispatch","initialFieldValues","title","message","styles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","PostMessageForm","dispatch","values","setValues","errors","setErrors","handleInputChange","resetForm","setCurrentId","handleAdd","console","log","handleSubmit","e","preventDefault","classes","error","helperText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./actions/postMessage\";\r\n// import ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\r\nimport { create } from \"../../store/postMessageSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nconst initialFieldValues = {\r\n  title: \"\",\r\n  message: \"\",\r\n};\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n  postBtn: {\r\n    width: \"50%\",\r\n  },\r\n});\r\n\r\nconst PostMessageForm = () => {\r\n  const dispatch = useDispatch();\r\n  // useEffect(() => {\r\n  //   if (props.currentId != 0) {\r\n  //     setValues({\r\n  //       ...props.postMessageList.find((x) => x._id == props.currentId),\r\n  //     });\r\n  //     setErrors({});\r\n  //   }\r\n  // }, [props.currentId]);\r\n\r\n  // const validate = () => {\r\n  //   let temp = { ...errors };\r\n  //   temp.title = values.title ? \"\" : \"This field is required.\";\r\n  //   temp.message = values.message ? \"\" : \"This field is required.\";\r\n  //   setErrors({\r\n  //     ...temp,\r\n  //   });\r\n  //   return Object.values(temp).every((x) => x == \"\");\r\n  // };\r\n\r\n  var { values, setValues, errors, setErrors, handleInputChange, resetForm } =\r\n    useForm(initialFieldValues, setCurrentId);\r\n\r\n  const handleAdd = () => {\r\n    console.log(values);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n    // const onSuccess = () => {\r\n    //   console.log(\"Done\");\r\n  };\r\n  //   if (validate()) {\r\n  //     if (props.currentId == 0) {\r\n  //       values, onSuccess;\r\n  //     } else {\r\n  //       updatePostMessage(props.currentId, values, onSuccess);\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <form\r\n      autoComplete=\"off\"\r\n      noValidate\r\n      className={`${classes.root} ${classes.form}`}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <TextField\r\n        name=\"title\"\r\n        variant=\"outlined\"\r\n        label=\"Title\"\r\n        fullWidth\r\n        value={values.title}\r\n        onChange={handleInputChange}\r\n        {...(errors.title && { error: true, helperText: errors.title })}\r\n      />\r\n      <TextField\r\n        name=\"message\"\r\n        variant=\"outlined\"\r\n        label=\"Message\"\r\n        fullWidth\r\n        multiline\r\n        rows={4}\r\n        value={values.message}\r\n        onChange={handleInputChange}\r\n        {...(errors.message && { error: true, helperText: errors.message })}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        className={classes.postBtn}\r\n        onClick={() => handleAdd()}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   postMessageList: state.postMessage.list,\r\n// });\r\n\r\n// const mapActionToProps = {\r\n//   createPostMessage: actions.create,\r\n//   updatePostMessage: actions.update,\r\n// };\r\n\r\nexport default withStyles(styles)(PostMessageForm);\r\n"]},"metadata":{},"sourceType":"module"}