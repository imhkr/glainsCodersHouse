{"ast":null,"code":"import { ACTION_TYPES } from \"../actions/postMessage\";\nconst initialState = {\n  list: []\n}; //postMessage.list\n\nexport const postMessage = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_ALL:\n      return { ...state,\n        list: [...action.payload]\n      };\n\n    case ACTION_TYPES.CREATE:\n      return { ...state,\n        list: [...state.list, action.payload]\n      };\n\n    case ACTION_TYPES.UPDATE:\n      return { ...state,\n        list: state.list.map(x => x._id == action.payload._id ? action.payload : x)\n      };\n\n    case ACTION_TYPES.DELETE:\n      return { ...state,\n        list: state.list.filter(x => x._id != action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/reducers/postMessage.js"],"names":["ACTION_TYPES","initialState","list","postMessage","state","action","type","FETCH_ALL","payload","CREATE","UPDATE","map","x","_id","DELETE","filter"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB,C,CAGA;;AACA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,YAAY,CAACO,SAAlB;AACE,aAAO,EACL,GAAGH,KADE;AAELF,QAAAA,IAAI,EAAE,CAAC,GAAGG,MAAM,CAACG,OAAX;AAFD,OAAP;;AAIF,SAAKR,YAAY,CAACS,MAAlB;AACE,aAAO,EACL,GAAGL,KADE;AAELF,QAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBG,MAAM,CAACG,OAAvB;AAFD,OAAP;;AAIF,SAAKR,YAAY,CAACU,MAAlB;AACE,aAAO,EACL,GAAGN,KADE;AAELF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWS,GAAX,CAAgBC,CAAD,IACnBA,CAAC,CAACC,GAAF,IAASR,MAAM,CAACG,OAAP,CAAeK,GAAxB,GAA8BR,MAAM,CAACG,OAArC,GAA+CI,CAD3C;AAFD,OAAP;;AAOF,SAAKZ,YAAY,CAACc,MAAlB;AACE,aAAO,EACL,GAAGV,KADE;AAELF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWa,MAAX,CAAmBH,CAAD,IAAOA,CAAC,CAACC,GAAF,IAASR,MAAM,CAACG,OAAzC;AAFD,OAAP;;AAKF;AACE,aAAOJ,KAAP;AA1BJ;AA4BD,CA7BM","sourcesContent":["import { ACTION_TYPES } from \"../actions/postMessage\";\r\n\r\nconst initialState = {\r\n  list: [],\r\n};\r\n//postMessage.list\r\nexport const postMessage = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.FETCH_ALL:\r\n      return {\r\n        ...state,\r\n        list: [...action.payload],\r\n      };\r\n    case ACTION_TYPES.CREATE:\r\n      return {\r\n        ...state,\r\n        list: [...state.list, action.payload],\r\n      };\r\n    case ACTION_TYPES.UPDATE:\r\n      return {\r\n        ...state,\r\n        list: state.list.map((x) =>\r\n          x._id == action.payload._id ? action.payload : x\r\n        ),\r\n      };\r\n\r\n    case ACTION_TYPES.DELETE:\r\n      return {\r\n        ...state,\r\n        list: state.list.filter((x) => x._id != action.payload),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}