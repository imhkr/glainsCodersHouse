{"ast":null,"code":"const {\n  creatSlice\n} = require(\"@reduxjs/toolkit\");\n\nconst postSlice = createSlice({\n  name: \"post\",\n  list: [],\n  reducers: {\n    fetch_all(state, action) {\n      state.push(action.payload);\n    },\n\n    create(state, action) {\n      // state.push(list);\n      state.push(action.payload);\n    },\n\n    update(state, action) {\n      state = state.map(x => x._id == action.payload._id ? action.payload : x);\n    },\n\n    delete(state, action) {\n      list: state.list.filter(x => x._id != action.payload);\n    }\n\n  }\n});\nexport const {\n  fetch_all,\n  create,\n  update\n} = postSlice.actions;\nexport default postSlice.reducer; // export const postMessage = (state = initialState, action) => {\n//   switch (action.type) {\n//     // case ACTION_TYPES.FETCH_ALL:\n//     //   return {\n//     //     ...state,\n//     //     list: [...action.payload],\n//     //   };\n//     // case ACTION_TYPES.CREATE:\n//     //   return {\n//     //     ...state,\n//     //     list: [...state.list, action.payload],\n//     //   };\n//     // case ACTION_TYPES.UPDATE:\n//     //   return {\n//     //     ...state,\n//     //     list: state.list.map((x) =>\n//     //       x._id == action.payload._id ? action.payload : x\n//     //     ),\n//     //   };\n//     case ACTION_TYPES.DELETE:\n//       return {\n//         ...state,\n//         list: state.list.filter((x) => x._id != action.payload),\n//       };\n//     default:\n//       return state;\n//   }\n// };","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/store/postMessageSlice.js"],"names":["creatSlice","require","postSlice","createSlice","name","list","reducers","fetch_all","state","action","push","payload","create","update","map","x","_id","delete","filter","actions","reducer"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,kBAAD,CAA9B;;AAEA,MAAMC,SAAS,GAAGC,WAAW,CAAC;AAC5BC,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,IAAI,EAAE,EAFsB;AAG5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;;AAIRC,IAAAA,MAAM,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACpB;AACAD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAPO;;AAQRE,IAAAA,MAAM,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,GAAGA,KAAK,CAACM,GAAN,CAAWC,CAAD,IAChBA,CAAC,CAACC,GAAF,IAASP,MAAM,CAACE,OAAP,CAAeK,GAAxB,GAA8BP,MAAM,CAACE,OAArC,GAA+CI,CADzC,CAAR;AAGD,KAZO;;AAaRE,IAAAA,MAAM,CAACT,KAAD,EAAQC,MAAR,EAAgB;AACpBJ,MAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWa,MAAX,CAAmBH,CAAD,IAAOA,CAAC,CAACC,GAAF,IAASP,MAAM,CAACE,OAAzC;AACP;;AAfO;AAHkB,CAAD,CAA7B;AAsBA,OAAO,MAAM;AAAEJ,EAAAA,SAAF;AAAaK,EAAAA,MAAb;AAAqBC,EAAAA;AAArB,IAAgCX,SAAS,CAACiB,OAAhD;AACP,eAAejB,SAAS,CAACkB,OAAzB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["const { creatSlice } = require(\"@reduxjs/toolkit\");\r\n\r\nconst postSlice = createSlice({\r\n  name: \"post\",\r\n  list: [],\r\n  reducers: {\r\n    fetch_all(state, action) {\r\n      state.push(action.payload);\r\n    },\r\n    create(state, action) {\r\n      // state.push(list);\r\n      state.push(action.payload);\r\n    },\r\n    update(state, action) {\r\n      state = state.map((x) =>\r\n        x._id == action.payload._id ? action.payload : x\r\n      );\r\n    },\r\n    delete(state, action) {\r\n      list: state.list.filter((x) => x._id != action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { fetch_all, create, update } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n// export const postMessage = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     // case ACTION_TYPES.FETCH_ALL:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: [...action.payload],\r\n//     //   };\r\n//     // case ACTION_TYPES.CREATE:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: [...state.list, action.payload],\r\n//     //   };\r\n//     // case ACTION_TYPES.UPDATE:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: state.list.map((x) =>\r\n//     //       x._id == action.payload._id ? action.payload : x\r\n//     //     ),\r\n//     //   };\r\n\r\n//     case ACTION_TYPES.DELETE:\r\n//       return {\r\n//         ...state,\r\n//         list: state.list.filter((x) => x._id != action.payload),\r\n//       };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}