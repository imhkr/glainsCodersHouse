{"ast":null,"code":"import api from \"./api\";\n\nconst {\n  createSlice\n} = require(\"@reduxjs/toolkit\");\n\nconst initialState = [];\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {\n    fetch_all(state, action) {// state.push(action.payload);\n      // api\n      //   .postMessage()\n      //   .fetchAll()\n      //   .then((res) => {\n      //     dispatch({\n      //       type: ACTION_TYPES.FETCH_ALL,\n      //       payload: res.data,\n      //     });\n      //   })\n      //   .catch((err) => console.log(err));\n    },\n\n    create(state, action) {\n      // state.push(list);\n      state.push(action.payload);\n      api.postMessage().create(action.payload);\n    },\n\n    update(state, action) {\n      state = state.map(x => x._id == action.payload._id ? action.payload : x);\n    },\n\n    delete(state, action) {\n      state: state.filter(x => x._id != action.payload);\n    }\n\n  }\n});\nexport const {\n  fetch_all,\n  create,\n  update\n} = postSlice.actions;\nexport default postSlice.reducer; // export const postMessage = (state = initialState, action) => {\n//   switch (action.type) {\n//     // case ACTION_TYPES.FETCH_ALL:\n//     //   return {\n//     //     ...state,\n//     //     list: [...action.payload],\n//     //   };\n//     // case ACTION_TYPES.CREATE:\n//     //   return {\n//     //     ...state,\n//     //     list: [...state.list, action.payload],\n//     //   };\n//     // case ACTION_TYPES.UPDATE:\n//     //   return {\n//     //     ...state,\n//     //     list: state.list.map((x) =>\n//     //       x._id == action.payload._id ? action.payload : x\n//     //     ),\n//     //   };\n//     case ACTION_TYPES.DELETE:\n//       return {\n//         ...state,\n//         list: state.list.filter((x) => x._id != action.payload),\n//       };\n//     default:\n//       return state;\n//   }\n// };","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/store/postMessageSlice.js"],"names":["api","createSlice","require","initialState","postSlice","name","reducers","fetch_all","state","action","create","push","payload","postMessage","update","map","x","_id","delete","filter","actions","reducer"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBC,OAAO,CAAC,kBAAD,CAA/B;;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,MADsB;AAE5BF,EAAAA,YAF4B;AAG5BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB,CACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAbO;;AAcRC,IAAAA,MAAM,CAACF,KAAD,EAAQC,MAAR,EAAgB;AACpB;AACAD,MAAAA,KAAK,CAACG,IAAN,CAAWF,MAAM,CAACG,OAAlB;AACAZ,MAAAA,GAAG,CAACa,WAAJ,GAAkBH,MAAlB,CAAyBD,MAAM,CAACG,OAAhC;AACD,KAlBO;;AAmBRE,IAAAA,MAAM,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,GAAGA,KAAK,CAACO,GAAN,CAAWC,CAAD,IAChBA,CAAC,CAACC,GAAF,IAASR,MAAM,CAACG,OAAP,CAAeK,GAAxB,GAA8BR,MAAM,CAACG,OAArC,GAA+CI,CADzC,CAAR;AAGD,KAvBO;;AAwBRE,IAAAA,MAAM,CAACV,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,EAAEA,KAAK,CAACW,MAAN,CAAcH,CAAD,IAAOA,CAAC,CAACC,GAAF,IAASR,MAAM,CAACG,OAApC;AACR;;AA1BO;AAHkB,CAAD,CAA7B;AAiCA,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaG,EAAAA,MAAb;AAAqBI,EAAAA;AAArB,IAAgCV,SAAS,CAACgB,OAAhD;AACP,eAAehB,SAAS,CAACiB,OAAzB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import api from \"./api\";\r\nconst { createSlice } = require(\"@reduxjs/toolkit\");\r\n\r\nconst initialState = [];\r\nconst postSlice = createSlice({\r\n  name: \"post\",\r\n  initialState,\r\n  reducers: {\r\n    fetch_all(state, action) {\r\n      // state.push(action.payload);\r\n      // api\r\n      //   .postMessage()\r\n      //   .fetchAll()\r\n      //   .then((res) => {\r\n      //     dispatch({\r\n      //       type: ACTION_TYPES.FETCH_ALL,\r\n      //       payload: res.data,\r\n      //     });\r\n      //   })\r\n      //   .catch((err) => console.log(err));\r\n    },\r\n    create(state, action) {\r\n      // state.push(list);\r\n      state.push(action.payload);\r\n      api.postMessage().create(action.payload);\r\n    },\r\n    update(state, action) {\r\n      state = state.map((x) =>\r\n        x._id == action.payload._id ? action.payload : x\r\n      );\r\n    },\r\n    delete(state, action) {\r\n      state: state.filter((x) => x._id != action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { fetch_all, create, update } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n// export const postMessage = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     // case ACTION_TYPES.FETCH_ALL:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: [...action.payload],\r\n//     //   };\r\n//     // case ACTION_TYPES.CREATE:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: [...state.list, action.payload],\r\n//     //   };\r\n//     // case ACTION_TYPES.UPDATE:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: state.list.map((x) =>\r\n//     //       x._id == action.payload._id ? action.payload : x\r\n//     //     ),\r\n//     //   };\r\n\r\n//     case ACTION_TYPES.DELETE:\r\n//       return {\r\n//         ...state,\r\n//         list: state.list.filter((x) => x._id != action.payload),\r\n//       };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}