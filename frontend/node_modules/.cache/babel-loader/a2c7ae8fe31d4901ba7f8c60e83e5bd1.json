{"ast":null,"code":"import api from \"./api\";\n\nconst {\n  createSlice\n} = require(\"@reduxjs/toolkit\");\n\nconst initialState = [];\nconst postSlice = createSlice({\n  name: \"post\",\n  initialState,\n  reducers: {\n    fetch_all(state, action) {\n      state.push(action.payload);\n      api.postMessage().fetchAll().then(res => {\n        dispatch({\n          type: ACTION_TYPES.FETCH_ALL,\n          payload: res.data\n        });\n      }).catch(err => console.log(err));\n    },\n\n    create(state, action) {\n      // state.push(list);\n      state.push(action.payload);\n      api.postMessage().create(action.payload).then(res => {\n        dispatch({\n          type: ACTION_TYPES.CREATE,\n          payload: res.data\n        });\n        onSuccess();\n      }).catch(err => console.log(err));\n    },\n\n    update(state, action) {\n      state = state.map(x => x._id == action.payload._id ? action.payload : x);\n    },\n\n    delete(state, action) {\n      state: state.filter(x => x._id != action.payload);\n    }\n\n  }\n});\nexport const {\n  fetch_all,\n  create,\n  update\n} = postSlice.actions;\nexport default postSlice.reducer; // export const postMessage = (state = initialState, action) => {\n//   switch (action.type) {\n//     // case ACTION_TYPES.FETCH_ALL:\n//     //   return {\n//     //     ...state,\n//     //     list: [...action.payload],\n//     //   };\n//     // case ACTION_TYPES.CREATE:\n//     //   return {\n//     //     ...state,\n//     //     list: [...state.list, action.payload],\n//     //   };\n//     // case ACTION_TYPES.UPDATE:\n//     //   return {\n//     //     ...state,\n//     //     list: state.list.map((x) =>\n//     //       x._id == action.payload._id ? action.payload : x\n//     //     ),\n//     //   };\n//     case ACTION_TYPES.DELETE:\n//       return {\n//         ...state,\n//         list: state.list.filter((x) => x._id != action.payload),\n//       };\n//     default:\n//       return state;\n//   }\n// };","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/store/postMessageSlice.js"],"names":["api","createSlice","require","initialState","postSlice","name","reducers","fetch_all","state","action","push","payload","postMessage","fetchAll","then","res","dispatch","type","ACTION_TYPES","FETCH_ALL","data","catch","err","console","log","create","CREATE","onSuccess","update","map","x","_id","delete","filter","actions","reducer"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBC,OAAO,CAAC,kBAAD,CAA/B;;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,MADsB;AAE5BF,EAAAA,YAF4B;AAG5BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACAX,MAAAA,GAAG,CACAY,WADH,GAEGC,QAFH,GAGGC,IAHH,CAGSC,GAAD,IAAS;AACbC,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEC,YAAY,CAACC,SADZ;AAEPR,UAAAA,OAAO,EAAEI,GAAG,CAACK;AAFN,SAAD,CAAR;AAID,OARH,EASGC,KATH,CASUC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CATlB;AAUD,KAbO;;AAcRG,IAAAA,MAAM,CAACjB,KAAD,EAAQC,MAAR,EAAgB;AACpB;AACAD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACAX,MAAAA,GAAG,CACAY,WADH,GAEGa,MAFH,CAEUhB,MAAM,CAACE,OAFjB,EAGGG,IAHH,CAGSC,GAAD,IAAS;AACbC,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEC,YAAY,CAACQ,MADZ;AAEPf,UAAAA,OAAO,EAAEI,GAAG,CAACK;AAFN,SAAD,CAAR;AAIAO,QAAAA,SAAS;AACV,OATH,EAUGN,KAVH,CAUUC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAVlB;AAWD,KA5BO;;AA6BRM,IAAAA,MAAM,CAACpB,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,GAAGA,KAAK,CAACqB,GAAN,CAAWC,CAAD,IAChBA,CAAC,CAACC,GAAF,IAAStB,MAAM,CAACE,OAAP,CAAeoB,GAAxB,GAA8BtB,MAAM,CAACE,OAArC,GAA+CmB,CADzC,CAAR;AAGD,KAjCO;;AAkCRE,IAAAA,MAAM,CAACxB,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,EAAEA,KAAK,CAACyB,MAAN,CAAcH,CAAD,IAAOA,CAAC,CAACC,GAAF,IAAStB,MAAM,CAACE,OAApC;AACR;;AApCO;AAHkB,CAAD,CAA7B;AA2CA,OAAO,MAAM;AAAEJ,EAAAA,SAAF;AAAakB,EAAAA,MAAb;AAAqBG,EAAAA;AAArB,IAAgCxB,SAAS,CAAC8B,OAAhD;AACP,eAAe9B,SAAS,CAAC+B,OAAzB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import api from \"./api\";\r\nconst { createSlice } = require(\"@reduxjs/toolkit\");\r\n\r\nconst initialState = [];\r\nconst postSlice = createSlice({\r\n  name: \"post\",\r\n  initialState,\r\n  reducers: {\r\n    fetch_all(state, action) {\r\n      state.push(action.payload);\r\n      api\r\n        .postMessage()\r\n        .fetchAll()\r\n        .then((res) => {\r\n          dispatch({\r\n            type: ACTION_TYPES.FETCH_ALL,\r\n            payload: res.data,\r\n          });\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    create(state, action) {\r\n      // state.push(list);\r\n      state.push(action.payload);\r\n      api\r\n        .postMessage()\r\n        .create(action.payload)\r\n        .then((res) => {\r\n          dispatch({\r\n            type: ACTION_TYPES.CREATE,\r\n            payload: res.data,\r\n          });\r\n          onSuccess();\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    update(state, action) {\r\n      state = state.map((x) =>\r\n        x._id == action.payload._id ? action.payload : x\r\n      );\r\n    },\r\n    delete(state, action) {\r\n      state: state.filter((x) => x._id != action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { fetch_all, create, update } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n// export const postMessage = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     // case ACTION_TYPES.FETCH_ALL:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: [...action.payload],\r\n//     //   };\r\n//     // case ACTION_TYPES.CREATE:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: [...state.list, action.payload],\r\n//     //   };\r\n//     // case ACTION_TYPES.UPDATE:\r\n//     //   return {\r\n//     //     ...state,\r\n//     //     list: state.list.map((x) =>\r\n//     //       x._id == action.payload._id ? action.payload : x\r\n//     //     ),\r\n//     //   };\r\n\r\n//     case ACTION_TYPES.DELETE:\r\n//       return {\r\n//         ...state,\r\n//         list: state.list.filter((x) => x._id != action.payload),\r\n//       };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}