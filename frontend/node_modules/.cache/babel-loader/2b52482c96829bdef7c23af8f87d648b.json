{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport { ACTIONS } from \"../actions\";\nimport socketInit from \"../socket\";\nimport freeice from \"freeice\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\nexport const useWebRTC = (roomId, user) => {\n  _s();\n\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const socket = useRef(null);\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef([]);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    console.log(\"clients\", clients, lookingFor);\n\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n  useEffect(() => {\n    socket.current = socketInit();\n  }, []); // Handle new peer\n\n  useEffect(() => {\n    const handleNewPeer = async ({\n      peerId,\n      createOffer,\n      user: remoteUser\n    }) => {\n      // If already connected then prevent connecting again\n      if (peerId in connections.current) {\n        return console.warn(`You are already connected with ${peerId} (${user.name})`);\n      } // Store it to connections\n\n\n      connections.current[peerId] = new RTCPeerConnection({\n        iceServers: freeice()\n      }); // Handle new ice candidate on this peer connection\n\n      connections.current[peerId].onicecandidate = event => {\n        socket.current.emit(ACTIONS.RELAY_ICE, {\n          peerId,\n          icecandidate: event.candidate\n        });\n      }; // Handle on track event on this connection\n\n\n      connections.current[peerId].ontrack = ({\n        streams: [remoteStream]\n      }) => {\n        addNewClient({ ...remoteUser,\n          muted: true\n        }, () => {\n          // console.log('peer', audioElements.current, peerId);\n          if (audioElements.current[remoteUser.id]) {\n            audioElements.current[remoteUser.id].srcObject = remoteStream;\n          } else {\n            let settled = false;\n            const interval = setInterval(() => {\n              if (audioElements.current[remoteUser.id]) {\n                audioElements.current[remoteUser.id].srcObject = remoteStream;\n                settled = true;\n              }\n\n              if (settled) {\n                clearInterval(interval);\n              }\n            }, 1000);\n          }\n        });\n      }; // Add connection to peer connections track\n\n\n      localMediaStream.current.getTracks().forEach(track => {\n        connections.current[peerId].addTrack(track, localMediaStream.current);\n      }); // Create an offer if required\n\n      if (createOffer) {\n        const offer = await connections.current[peerId].createOffer(); // Set as local description\n\n        await connections.current[peerId].setLocalDescription(offer); // send offer to the server\n\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: offer\n        });\n      }\n    }; // Listen for add peer event from ws\n\n\n    socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n    return () => {\n      socket.current.off(ACTIONS.ADD_PEER);\n    };\n  }, [clients]);\n  useEffect(() => {\n    const startCapture = async () => {\n      // Start capturing local audio stream.\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    };\n\n    startCapture().then(() => {\n      // add user to clients list\n      addNewClient({ ...user,\n        muted: true\n      }, () => {\n        const localElement = audioElements.current[user.id];\n\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n      }); // Emit the action to join\n\n      socket.current.emit(ACTIONS.JOIN, {\n        roomId,\n        user\n      });\n    }); // Leaving the room\n\n    return () => {\n      localMediaStream.current.getTracks().forEach(track => track.stop());\n      socket.current.emit(ACTIONS.LEAVE, {\n        roomId\n      });\n    };\n  }, []); // Handle ice candidate\n\n  useEffect(() => {\n    socket.current.on(ACTIONS.ICE_CANDIDATE, ({\n      peerId,\n      icecandidate\n    }) => {\n      // console.log('ices', connections.current[peerId]);\n      if (icecandidate) {\n        connections.current[peerId].addIceCandidate(icecandidate);\n      }\n    });\n    return () => {\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n    };\n  }, []); // Handle session description\n\n  useEffect(() => {\n    const setRemoteMedia = async ({\n      peerId,\n      sessionDescription: remoteSessionDescription\n    }) => {\n      connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription)); // If session descrition is offer then create an answer\n\n      if (remoteSessionDescription.type === \"offer\") {\n        const connection = connections.current[peerId];\n        const answer = await connection.createAnswer();\n        connection.setLocalDescription(answer);\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: answer\n        });\n      }\n    };\n\n    socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n    return () => {\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n    };\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"unload\", function () {\n      alert(\"leaving\");\n      socket.current.emit(ACTIONS.LEAVE, {\n        roomId\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const handleRemovePeer = ({\n      peerID,\n      userId\n    }) => {\n      //console.log('leaving', peerID, userId);\n      if (connections.current[peerID]) {\n        connections.current[peerID].close();\n      }\n\n      delete connections.current[peerID];\n      delete audioElements.current[peerID];\n      setClients(list => list.filter(c => c.id !== userId));\n    };\n\n    socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n    return () => {\n      socket.current.off(ACTIONS.REMOVE_PEER);\n    };\n  }, []);\n  useEffect(() => {\n    // handle mute and unmute\n    socket.current.on(ACTIONS.MUTE, ({\n      peerId,\n      userId\n    }) => {\n      console.log(\"muting\", userId);\n      setMute(true, userId);\n    });\n    socket.current.on(ACTIONS.UNMUTE, ({\n      peerId,\n      userId\n    }) => {\n      console.log(\"unmuting\", userId);\n      setMute(false, userId);\n    });\n\n    const setMute = (mute, userId) => {\n      const clientIdx = clientsRef.current.map(client => client.id).indexOf(userId);\n      console.log(\"idx\", clientIdx); // const connectedClients = clientsRef.current.filter(\n      //     (client) => client.id !== userId\n      // );\n\n      const connectedClientsClone = JSON.parse(JSON.stringify(clientsRef.current));\n\n      if (clientIdx > -1) {\n        connectedClientsClone[clientIdx].muted = mute;\n        console.log(\"muuuu\", connectedClientsClone);\n        setClients(_ => connectedClientsClone);\n      }\n    };\n  }, []);\n\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n\n  useEffect(() => {\n    clientsRef.current = clients;\n  }, [clients]);\n\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id\n            });\n          } // console.log(\n          //     'localMediaStream ',\n          //     localMediaStream.current.getTracks()\n          // );\n\n\n          settled = true;\n        }\n\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n\n  return {\n    clients,\n    provideRef,\n    handleMute,\n    localStream: localMediaStream.current\n  };\n};\n\n_s(useWebRTC, \"nxqI+Xhxernb2eblwxzywPmWVzQ=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"sources":["C:/Users/himan/Downloads/Compressed/Glains-Coders-House-master/GlainsCodersHouse/backend/frontend/src/hooks/useWebRTC.js"],"names":["useEffect","useState","useRef","useCallback","ACTIONS","socketInit","freeice","useStateWithCallback","useWebRTC","roomId","user","clients","setClients","audioElements","connections","socket","localMediaStream","clientsRef","addNewClient","newClient","cb","lookingFor","find","client","id","console","log","undefined","existingClients","current","handleNewPeer","peerId","createOffer","remoteUser","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","emit","RELAY_ICE","icecandidate","candidate","ontrack","streams","remoteStream","muted","srcObject","settled","interval","setInterval","clearInterval","getTracks","forEach","track","addTrack","offer","setLocalDescription","RELAY_SDP","sessionDescription","on","ADD_PEER","off","startCapture","navigator","mediaDevices","getUserMedia","audio","then","localElement","volume","JOIN","stop","LEAVE","ICE_CANDIDATE","addIceCandidate","setRemoteMedia","remoteSessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","answer","createAnswer","SESSION_DESCRIPTION","window","addEventListener","alert","handleRemovePeer","peerID","userId","close","list","filter","c","REMOVE_PEER","MUTE","setMute","UNMUTE","mute","clientIdx","map","indexOf","connectedClientsClone","JSON","parse","stringify","_","provideRef","instance","handleMute","isMute","enabled","localStream"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef, useCallback } from \"react\";\nimport { ACTIONS } from \"../actions\";\nimport socketInit from \"../socket\";\nimport freeice from \"freeice\";\nimport { useStateWithCallback } from \"./useStateWithCallback\";\n\nexport const useWebRTC = (roomId, user) => {\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const socket = useRef(null);\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef([]);\n\n  const addNewClient = useCallback(\n    (newClient, cb) => {\n      const lookingFor = clients.find((client) => client.id === newClient.id);\n\n      console.log(\"clients\", clients, lookingFor);\n      if (lookingFor === undefined) {\n        setClients((existingClients) => [...existingClients, newClient], cb);\n      }\n    },\n    [clients, setClients]\n  );\n\n  useEffect(() => {\n    socket.current = socketInit();\n  }, []);\n\n  // Handle new peer\n\n  useEffect(() => {\n    const handleNewPeer = async ({ peerId, createOffer, user: remoteUser }) => {\n      // If already connected then prevent connecting again\n      if (peerId in connections.current) {\n        return console.warn(\n          `You are already connected with ${peerId} (${user.name})`\n        );\n      }\n\n      // Store it to connections\n      connections.current[peerId] = new RTCPeerConnection({\n        iceServers: freeice(),\n      });\n\n      // Handle new ice candidate on this peer connection\n      connections.current[peerId].onicecandidate = (event) => {\n        socket.current.emit(ACTIONS.RELAY_ICE, {\n          peerId,\n          icecandidate: event.candidate,\n        });\n      };\n\n      // Handle on track event on this connection\n      connections.current[peerId].ontrack = ({ streams: [remoteStream] }) => {\n        addNewClient({ ...remoteUser, muted: true }, () => {\n          // console.log('peer', audioElements.current, peerId);\n\n          if (audioElements.current[remoteUser.id]) {\n            audioElements.current[remoteUser.id].srcObject = remoteStream;\n          } else {\n            let settled = false;\n            const interval = setInterval(() => {\n              if (audioElements.current[remoteUser.id]) {\n                audioElements.current[remoteUser.id].srcObject = remoteStream;\n                settled = true;\n              }\n\n              if (settled) {\n                clearInterval(interval);\n              }\n            }, 1000);\n          }\n        });\n      };\n\n      // Add connection to peer connections track\n      localMediaStream.current.getTracks().forEach((track) => {\n        connections.current[peerId].addTrack(track, localMediaStream.current);\n      });\n\n      // Create an offer if required\n      if (createOffer) {\n        const offer = await connections.current[peerId].createOffer();\n\n        // Set as local description\n        await connections.current[peerId].setLocalDescription(offer);\n\n        // send offer to the server\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: offer,\n        });\n      }\n    };\n\n    // Listen for add peer event from ws\n    socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n    return () => {\n      socket.current.off(ACTIONS.ADD_PEER);\n    };\n  }, [clients]);\n\n  useEffect(() => {\n    const startCapture = async () => {\n      // Start capturing local audio stream.\n\n      localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n    };\n\n    startCapture().then(() => {\n      // add user to clients list\n      addNewClient({ ...user, muted: true }, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n      });\n\n      // Emit the action to join\n      socket.current.emit(ACTIONS.JOIN, {\n        roomId,\n        user,\n      });\n    });\n\n    // Leaving the room\n    return () => {\n      localMediaStream.current.getTracks().forEach((track) => track.stop());\n      socket.current.emit(ACTIONS.LEAVE, { roomId });\n    };\n  }, []);\n\n  // Handle ice candidate\n  useEffect(() => {\n    socket.current.on(ACTIONS.ICE_CANDIDATE, ({ peerId, icecandidate }) => {\n      // console.log('ices', connections.current[peerId]);\n      if (icecandidate) {\n        connections.current[peerId].addIceCandidate(icecandidate);\n      }\n    });\n\n    return () => {\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n    };\n  }, []);\n\n  // Handle session description\n\n  useEffect(() => {\n    const setRemoteMedia = async ({\n      peerId,\n      sessionDescription: remoteSessionDescription,\n    }) => {\n      connections.current[peerId].setRemoteDescription(\n        new RTCSessionDescription(remoteSessionDescription)\n      );\n\n      // If session descrition is offer then create an answer\n      if (remoteSessionDescription.type === \"offer\") {\n        const connection = connections.current[peerId];\n\n        const answer = await connection.createAnswer();\n        connection.setLocalDescription(answer);\n\n        socket.current.emit(ACTIONS.RELAY_SDP, {\n          peerId,\n          sessionDescription: answer,\n        });\n      }\n    };\n\n    socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n    return () => {\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n    };\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"unload\", function () {\n      alert(\"leaving\");\n      socket.current.emit(ACTIONS.LEAVE, { roomId });\n    });\n  }, []);\n\n  useEffect(() => {\n    const handleRemovePeer = ({ peerID, userId }) => {\n      //console.log('leaving', peerID, userId);\n\n      if (connections.current[peerID]) {\n        connections.current[peerID].close();\n      }\n\n      delete connections.current[peerID];\n      delete audioElements.current[peerID];\n\n      setClients((list) => list.filter((c) => c.id !== userId));\n    };\n\n    socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n\n    return () => {\n      socket.current.off(ACTIONS.REMOVE_PEER);\n    };\n  }, []);\n\n  useEffect(() => {\n    // handle mute and unmute\n    socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\n      console.log(\"muting\", userId);\n      setMute(true, userId);\n    });\n\n    socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\n      console.log(\"unmuting\", userId);\n      setMute(false, userId);\n    });\n\n    const setMute = (mute, userId) => {\n      const clientIdx = clientsRef.current\n        .map((client) => client.id)\n        .indexOf(userId);\n\n      console.log(\"idx\", clientIdx);\n\n      // const connectedClients = clientsRef.current.filter(\n      //     (client) => client.id !== userId\n      // );\n\n      const connectedClientsClone = JSON.parse(\n        JSON.stringify(clientsRef.current)\n      );\n\n      if (clientIdx > -1) {\n        connectedClientsClone[clientIdx].muted = mute;\n        console.log(\"muuuu\", connectedClientsClone);\n        setClients((_) => connectedClientsClone);\n      }\n    };\n  }, []);\n\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n\n  useEffect(() => {\n    clientsRef.current = clients;\n  }, [clients]);\n\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id,\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id,\n            });\n          }\n          // console.log(\n          //     'localMediaStream ',\n          //     localMediaStream.current.getTracks()\n          // );\n          settled = true;\n        }\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n\n  return {\n    clients,\n    provideRef,\n    handleMute,\n    localStream: localMediaStream.current,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}